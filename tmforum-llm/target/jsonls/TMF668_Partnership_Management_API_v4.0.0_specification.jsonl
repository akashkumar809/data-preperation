{"tmforumApiId": "TMF668", "id": "TMF668-chunk-1", "chunkIndex": 1, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 1/10)", "documentType": "Tmforum api user guide", "text": "TM Forum Specification \n \n \nPartnership Management API REST \nSpecification \n \n \n \n \n \nTMF668 \nRelease 19.0 \nJuly 2019 \n \n \nLatest Update: TM Forum Release 19.0 \nMember Evaluation \nVersion 4.0.0 \nIPR Mode: RAND \n\n\nNOTICE \nCopyright \u00a9 TM Forum 2018. All Rights Reserved. \n \nThis document and translations of it may be copied and furnished to others, and derivative works that comment on \nor otherwise explain it or assist in its implementation may be prepared, copied, published, and distributed, in \nwhole or in part, without restriction of any kind, provided that the above copyright notice and this section are \nincluded on all such copies and derivative works. However, this document itself may not be modified in any way, \nincluding by removing the copyright notice or references to TM FORUM, except as needed for the purpose of \ndeveloping any document or deliverable produced by a TM FORUM Collaboration Project Team (in which case the \nrules applicable to copyrights, as set forth in the TM FORUM IPR Policy, must be followed) or as required to \ntranslate it into languages other than English. \n \nThe limited permissions granted above are perpetual and will not be revoked by TM FORUM or its successors or \nassigns. \n \nThis document and the information contained herein is provided on an \"AS IS\" basis and TM FORUM DISCLAIMS \nALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE \nINFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF \nMERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. \n \nDirect inquiries to the TM Forum office: \n \n4 Century Drive, Suite 100 \nParsippany, NJ 07054, USA \nTel No. +1 973 944 5100 \nFax No. +1 973 944 5110 \nTM Forum Web Page: www.tmforum.org \n \n\n\nTABLE OF CONTENTS \nNOTICE \n2 \nTable of Contents \n3 \nList of Tables 5 \nIntroduction \n6 \nSAMPLE USE CASES \n7 \nSupport of polymorphism and extension patterns \n15 \nRESOURCE MODEL 16 \nManaged Entity and Task Resource Models \n16 \nPartnership Specification resource \n16 \nPartnership resource \n19 \nNotification Resource Models \n26 \nPartnership Specification Create Event \n27 \nPartnership Specification Change Event \n28 \nPartnership Specification Delete Event \n28 \nPartnership Create Event \n28 \nPartnership Change Event \n29 \nPartnership Delete Event \n29 \nAPI OPERATIONS \n31 \nOperations on Partnership Specification \n31 \nList partnership specifications \n32 \nRetrieve partnership specification \n33 \nCreate partnership specification \n34 \nPatch partnership specification \n35 \nDelete partnership specification \n36 \nOperations on Partnership \n37 \nList partnerships \n37 \nRetrieve partnership \n38 \n\n\nCreate partnership \n40 \nPatch partnership \n41 \nDelete partnership \n42 \nAPI NOTIFICATIONS 44 \nRegister listener \n44 \nUnregister listener \n45 \nPublish Event to listener \n45 \nAcknowledgements \n47 \nRelease History \n47 \nContributors to Document \n47 \n\n\nLIST OF TABLES \n \nN/A \n \n\n\nINTRODUCTION \n \nThe following document is the specification of the REST API for Partnership Management. It includes the \nmodel definition as well as all available operations. \n \nBasically a partnership specification is defined by declaring a list of role specifications that the partners \ncan play. A role specification is typically characterized by an agreement specification. In addition some \nrole specifications imply the necessity to be linked to billing accounts. A Partnership instance in the other \nhand refers to its partnership specification and declares the list of partners \u2013 that is to say \u2013 the parties \nplaying a given role in the partnership. \n \nTechnically, the partnership management API defines PartnershipSpecification and Partnership as root \nresources. RoleSpecifications are sub-objects contained within a PartnershipSpecification. A Partnership \ndeclares \u2013 as contained instances - the partners involved in the partnership. A partner may be linked to \nagreements and accounts (such as billing or settlements accounts) in line with partnership specification \n(which may declare the used agreement specifications). The declared role name being played by the \nengaged party (\u201crole\u201d attribute in the RelatedParty structure) should match one of the role specifications \ndeclared in the partnership specification. \nThe following APIs are typically used in conjunction with this API: \n- \nParty API: defining the parties  \n- \nAgreement API: Definition of the terms of an agreement or an agreement specification \n- \nAccount API: Definition of billing/settlement/financial accounts that may be attached to the partners \n- \nPartyRole API: Maybe used for creating the Partners entities \u2013 representing the coupling of a party \nwith a given role \u2013 and then be attached to a given partnership. However Partners can be created \ndirectly as sub-objects of a given Partnership. \n \n \n\n\nSAMPLE USE CASES \n \nIn this section we provide some typical API usage scenarios described in a light-weight fashion. The intent \nis not to describe all possible contexts of use of the API (The process for building a partnership is out of \nscope of this api specification). \nA Global view \nThe figure below depicts an on-boarding business process at a very high level of abstraction. \n \nOption 1: All resources are created without interaction with prospective partner \nPartner A\nPartner B\nManage S/P \nengagement\nPartner\nPartner creation request\n(POST/organization)\nPartner identifier\nEstablish S/P \nagreement\nAgreement\nCredential\nPartner \nrole\nSigned agreement\nSelfcare credentials\nSettlement \nmanagement?\nManage \nSettlement \naccount\nPartner \naccount\nYes\nPartner \nsettlement \naccount\nInformation for settlement \naccount creation\nBilling \nmanagement?\nNo\nInformation for Billing account \ncreation\n(POST/billingAccount)\nManage \nBilling \naccount\nYes\nPartner \nbilling \naccount\nManage \npartner \ninventory\nPartner \nproduct \ninventory\nNo\nOn board S/P \ncapability\nPartner \nproduct \ncatalog\nExport selected ProductOffering \nAnd/or ProductSpecification\n(POST/catalog/exportJob)\nFinal \ncustomer \nproduct \ncatalog\nManage \ndeveloper\u2019s \njourney\nSupport S/P \ninterface \nmanagement\nDeveloper\u2019s portal, \ncredentials, testing \nenvironment, APIs...\nPrerequisite\nThe partner has \ndetermined potential \npartners, managed the \ntender process and \nnegociated commercial \narrangements. He \nwants to engage in \npartnership.\nManage S/P \nengagement\nEstablish S/P \nagreement\nManage \nSettlement \naccount\nSettlement account identifier\nManage \nBilling \naccount\nBilling account identifier\nOn board S/P \ncapability\nThe settlement account \ncreation and the billing \naccount creation \ndepends on the pricing \nconditions of the \nagreement.\nThis process step is \noptional and depends \non the partnership type\nCapability?\nYes"}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-2", "chunkIndex": 2, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 2/10)", "documentType": "Tmforum api user guide", "text": "This sequence diagram describes a partner on boarding process where: \n- \nprospective partner is not known by ecosystem manager system \n- \nall resources (party, partyRole, Party account, agreement, billing account and / or  settlement \naccount) are created without interaction with prospective partner \n- \nprospective partner validate partyRole and, then, partyRole is validated \n- \nprospective partner validate agreement and, then, agreement, billing account and / or settlement \naccount  are updated \n- \nprospective partner validate  \nOption 2: Party role / agreement resources creation follows interaction with prospective partner \n(Agreement is selected automatically based on partyrole chosen) \npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\nEcosystem manager\nInformation to be \ndeclared as partner ()\nParty creation \nrequest\nCreate partyRole \n(supplier)\nCreate partyAccount ()\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nPartner On Boarding\nOption 1 : all resources are created without interaction with prospective partner\n(sequence diagram corresponding to on boarding context details document description)\nCreate agreement \n(supplier)\nNotify agreement \ncreation  (ID)\nCreate billing account ()\nNotify billing account \ncreation  (ID)\nCreate settlement account ()\nNotify settlement \naccount creation  (ID)\nValidate agreement ()\nUpdate  agreement \n(status)\nNotify agreement \nstate change ()\nUpdate billing \naccount (status)\nUpdate settlement account \n(status)\nNotify billing account \nattribute change ()\nNotify settlement \naccount attribute \nchange ()\nExport product offering \n()\nCreate product offering ()\nNotify product offering \ncreation ()\n1\nValidate partyRole ()\nUpdate partyRole ()\nNotify partyRole \nupdate ()\nOrchestration \nlayer\nCreate Party ()\nNotify Party \ncreation  (ID)\nNotify Party \ncreation  (ID)\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nNotify agreement \ncreation  (ID)\nNotify billing account \ncreation  (ID)\nNotify settlement \naccount creation  (ID)\nPartyRole update \nrequest\nAgreement update \nrequest\nNotify partyRole \nupdate ()\nNotify agreement \nstate change ()\nNotify billing account \nattribute change ()\nNotify settlement \naccount attribute \nchange ()\nProduct offering \nexport request\n\n\nEcosystem manager\nPartner On Boarding\nOption 2 : Party role / agreement resources creation follows interaction with prospective partner\n( agreement is selected automatically based on partyrole chosen)\npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\nInformation to be \ndeclared as partner ()\nParty creation \nrequest\nCreate partyRole ()\nCreate partyAccount ()\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nCreate agreement ()\nNotify agreement \ncreation  (ID)\nCreate billing account ()\nNotify billing account \ncreation  (ID)\nCreate settlement account ()\nNotify settlement \naccount creation  (ID)\nValidate agreement ()\nUpdate  agreement \n(status)\nNotify agreement \nstate change ()\nUpdate billing \naccount (status)\nUpdate settlement account \n(status)\nNotify billing account \nattribute change ()\nNotify settlement \naccount attribute \nchange ()\nExport product offering \n()\nCreate product offering ()\nNotify product offering \ncreation ()\n1\nOrchestation \nlayer\nCreate Party ()\nNotify Party \ncreation  (ID)\nNotify Party \ncreation  (ID)\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nNotify agreement \ncreation  (ID)\nNotify billing account \ncreation  (ID)\nNotify settlement \naccount creation  (ID)\nAgreement update \nrequest\nNotify agreement \nstate change ()\nNotify billing account \nattribute change ()\nNotify settlement \naccount attribute \nchange ()\nProduct offering \nexport request\nRetrieve partyRole \nlist\n Retrieve \npartyRole list (ID)\nTransfer Party \nRole list (ID)\nSelects role from list ()\nPartyRole creation \nrequest\n \nThis sequence diagram describes a partner on boarding process where: \n- \nprospective partner is not known by ecosystem manager system \n- \nparty resources is created \n- \nlist of partyRole is retrieved \n- \nProspective partner selects a partyRole \n- \nPartyRole, party account , agreement billing account and / or settlement account resources are \ncreated \n- \nprospective partner validate agreement and, then, agreement, billing account and / or settlement \naccount  are updated \n \nOption 3: party role / agreement resources creation follows interaction with prospective partner \n(Agreement is selected by prospective partner) \n\n\n \nThis sequence diagram describes a partner on boarding process where: \n- \nprospective partner is not known by ecosystem manager system \n- \nparty resources is created \n- \nlist of partyRole is retrieved \n- \nprospective partner selects a partyRole \n- \npartyRole and party account  resources are created  \n- \nlist of agreement specifications  is retrieved \n- \nprospective partner selects an agreement specification \n- \nagreement, billing account and / or settlement account resources are created \n \nOption 4: agreement / party role resources creation follows interaction with prospective partner \n(Party role is selected automatically based upon agreement chosen) \nEcosystem manager\nPartner On Boarding\nOption 3: Party role / agreement resources creation follows interaction with prospective partner\n( agreement is selected by prospective partner)\npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\nInformation to be \ndeclared as partner ()\nParty creation \nrequest\nCreate partyRole ()\nCreate \npartyAccount ()\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nCreate agreement ()\nNotify agreement \ncreation  (ID)\nCreate billing \naccount ()\nNotify billing account \ncreation  (ID)\nCreate settlement \naccount ()\nNotify settlement \naccount creation  (ID)\nExport product offering \n()\nCreate product \noffering ()\nNotify product offering \ncreation ()\n1\nOrchestration \nlayer\nCreate Party ()\nNotify Party \ncreation  (ID)\nNotify Party \ncreation  (ID)\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nNotify agreement \ncreation  (ID)\nNotify billing account \ncreation  (ID)\nNotify settlement \naccount creation  (ID)\nProduct offering \nexport request\nRetrieve partyRole \nlist ()\nRetrieve partyrole \nlist ()\nTransfer Party \nRole list ()\nSelects role from list ()\nPartyRole creation \nrequest\nRetrieve agreement \nspecification  list ()\nRetrieve Agreements \nspecification  list ()\ntransfer Agreements \nsepcification list \nSelects agreement \nfrom list ()\nagreement \ncreation request\nAgreement \nspecification \nmanagement"}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-3", "chunkIndex": 3, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 3/10)", "documentType": "Tmforum api user guide", "text": "This sequence diagram describes a partner on boarding process where: \n- \nprospective partner is not known by ecosystem manager system \n- \nparty resources is created \n- \nlist of agreement specifications  is retrieved \n- \nprospective partner selects an agreement specification \n- \nagreement, billing account and / or settlement account resources are created \n- \npartyRole and partyAccount are created depending on agreement specification selected \n- \nProspective partner validates partyRole \n- \nPartyRole is updated \n \nOption 5: E-health partner on boarding use case: billing and settlement accounts are created after \nparty \n(Then service information is provided and agreement is created) \nEcosystem manager\nPartner On Boarding\nOption 4 : agreement  / Party role resources creation follows interaction with prospective partner\n(partyrole is selected automatically based  upon agreement  chosen)\npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\nInformation to be \ndeclared as partner ()\nParty creation \nrequest\nCreate partyRole ()\nCreate partyAccount ()\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nCreate agreement ()\nNotify agreement \ncreation  (ID)\nCreate billing account ()\nNotify billing account \ncreation  (ID)\nCreate settlement \naccount ()\nNotify settlement \naccount creation  (ID)\nValidate partyrole ()\nUpdate  partyRole \n(status)\nNotify partyRole \nupdate ()\nExport product offering \n()\nCreate product \noffering ()\nNotify product offering \ncreation ()\n1\nOrchestration \nlayer\nCreate Party ()\nNotify Party \ncreation  (ID)\nNotify Party \ncreation  (ID)\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nNotify agreement \ncreation  (ID)\nNotify billing account \ncreation  (ID)\nNotify settlement \naccount creation  (ID)\npartyRole update \nrequest\nNotify partyrole \nupdate ()\nProduct offering \nexport request\nRetrieve agreement \nspecification list ()\nretrieve agreement \nspecification  list ()\nTransfer \nagreement list ()\nSelects agreement \nfrom list ()\nAgreement \ncreation request\nAgreement\nspecifications\nmanagement\n\n\n \nThis sequence diagram describes the eHealth partner on boarding process where: \n- \nprospective partner is not known by ecosystem manager system \n- \nCreation of partner includes creation of party, partyRole and Party account \n- \nCreation of billing account is triggered by an account creation request from partner \n- \n\u201cService info\u201d provision by partner triggers product offering creation \n- \nCreation of product offering triggers agreement list notification. \nOption 6: Party has already selected a party role, party role needs to be approved, agreement \nsigned by party role needs to be retrieved \nEcosystem manager\nPartner On Boarding\nOption 5 : Ehealth partner on boarding use case: billing and settlement accounts are created after party. \n(Then service information is provided and agreement is created)\npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\nInformation to be \ndeclared as partner ()\nParty creation \nrequest\nCreate agreement ()\nCreate \npartyAccount ()\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nRetrieve agreement \nspecification  list ()\nNotify agreement \ncreation  (ID)\nCreate billing \naccount ()\nNotify billing account \ncreation  (ID)\nCreate settlement \naccount ()\nNotify settlement \naccount creation  (ID)\nExport product offering \n()\nCreate product offering ()\nNotify product offering \ncreation ()\n1\nOrchestration\nlayer\nCreate Party ()\nNotify Party \ncreation  (ID)\nNotify Party \ncreation  (ID)\nNotify PartyRole \ncreation  (ID)\nNotify partyAccount \ncreation  (ID)\nNotify agreement \ncreation  (ID)\nNotify billing account \ncreation  (ID)\nNotify settlement \naccount creation  (ID)\nProduct offering \nexport request\nCreate partyRole \n(ID)\nRetrieve agreement \nspecification  list ()\nTransfer \nagreement list (ID)\nSelects agreement \nfrom list ()\nagreement \ncreation request\nInformation for \naccount  creation ()\nBilling account \ncreation request\nSettlement account \ncreation request\nAgreement \nspecification\nmanagement\n\n\n \nThis sequence diagram describes a partner on boarding process where: \n- \nprospective partner already exists and needs to be approved \n- \nParty is retrieved (relevance to be confirmed) \n- \npartyRole is retrieved \n- \nPartyRole is approved \n- \nlist of agreements signed by partner (partyRole) are retrieved \nOption 7: Party role exist, agreement is updated \nEcosystem manager\nPartner On Boarding\nOption 6: party has already selected a partyRole, partyRole needs to be approved, Agreement signed by \npartyRole needs to be retrieved \npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\npartyRole retrieval \nrequest\nUpdate partyRole ()\nNotify PartyRole \nupdate  ()\nOrchestration \nlayer\nRetrieve Party ()\nRetrieve Party  ()\nNotify PartyRole \napproval\nRetrieve partyRole \n()\nRetrieve partyrole \n()\nRequest partyRole \napproval\nRetrieve signed \nagreement list ()\nRetrieve signed \nAgreements list ()\ntransfer signed \nAgreements list ()\nAgreement \nspecification \nmanagement\ntransfer partyRole \n()\nRetrieve partyRole \n()\nRetrieve partyRole \n()\nRequest signed ag \nagreements\n\n\n \nThis sequence diagram describes a partner on boarding process where: \n- \nprospective partner already exists and agreement needs to be updated \n- \nParty is retrieved (relevance to be confirmed) \n- \npartyRole is retrieved \n- \nlist of agreements related to party role are retrieved \n- \nagreement is updated \n \nEcosystem manager\nPartner On Boarding\nOption 7: partyRole exist, Agreement is updated\npartner\nExposure layer\nParty \nmanagement\nParty role \nmanagement\nAgreement\nmanagement\nBilling account\nmanagement\nSettlement  account\nmanagement\nProduct offering\nmanagement\npartyRole retrieval \nrequest\nOrchestration \nlayer\nRetrieve Party ()\nRetrieve Party  ()\nRetrieve partyRole \n()\nRetrieve partyrole \n()\nUpdate agreement  \n()\nNotify agreement \nupdate ()\ntransfer Agreement \nupdate ()\nAgreement \nspecification \nmanagement\ntransfer partyRole \n()\nRetrieve agreement \n()\nRetrieve \nagreement ()\nRequest \nagreement udate"}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-4", "chunkIndex": 4, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 4/10)", "documentType": "Tmforum api user guide", "text": "SUPPORT OF POLYMORPHISM AND EXTENSION PATTERNS \n \nSupport of polymorphic collections and types and schema based extension is provided by means of a list \nof generic meta-attributes that we describe below. Polymorphism in collections occurs when entities inherit \nfrom base entities, for instance a BillingAccount and SettlementAccount inheriting properties from the \nabstract Account entity. \nGeneric support of polymorphism and pattern extensions is described in the TMF API Guidelines v3.0 Part \n2 document. \nThe @type attribute provides a way to represent the actual class type of an entity. For example, within a \nlist of Account instances some may be instances of BillingAccount where other could be instances of \nSettlementAccount. The @type gives this information. All resources and sub-resources of this API have a \n@type attributes that can be provided when this is useful. \nThe @referredType can be used within reference entities (like for instance an AccountRef object) to \nexplicitly denote the actual entity type of the referred class. Notice that in reference entities the @type, \nwhen used, denotes the class type of the reference itself, such as BillingAccountRef or \nSettlementAccountRef, and not the class type of the referred object. However since reference classes are \nrarely sub-classed, @type is generally not useful in reference objects. \nThe @schemaLocation property can be used in resources to allow specifying user-defined properties of \nan Entity or to specify the expected characteristics of an entity. \nThe @baseType attribute gives a way to provide explicitly the base of class of a given resource that has \nbeen extended. \n \n \n\n\nRESOURCE MODEL \nManaged Entity and Task Resource Models \nPARTNERSHIP SPECIFICATION RESOURCE \nA partnership specification contains all the information for the setup of a partnership of a given kind. This \nincludes the list of identified role types for the partnership with the corresponding agreement \nspecifications. \nResource model \n\n\n \nField descriptions \nPartnershipSpecification fields \ndescription \nA string. An explanatory text regarding this partnership specification. \n\n\nhref \nA string. The reference url for this partnership specification. \nid \nA string. The identifier of the partnership specification. \nname \nA string. An identifying name for the partnership specification. \nroleSpecification \nA list of partnership role specifications (PartnershipRoleSpecification [*]). The \nlist of roles specifications a engaged party will be able to play for this kind of \npartnership. \nPartnershipRoleSpecification sub-resource \nA PartnershipRoleSpecification represents a specification of a role defined in the context of a given type of \npartnership (PartnershipSpecification), such as Buyer, Seller. \ndescription \nA string. An explanatory text documenting the role specification. \nname \nA string. The name of the role specification. This name uniquely identifies the \nrole specification within the partnership. \nrequiresBilling \nA boolean. Indicates whether billing operations will be associated to parties \nplaying the role. \nrequiresSettlement \nA boolean. Indicates whether settlement operations will be associated to \nparties playing the role. \nagreementSpecification A list of agreement specification references (AgreementSpecificationRef [*]). \nAn AgreementSpecification represents a template of an agreement that can \nbe used when establishing partnerships. \nAgreementSpecificationRef relationship \nAgreementSpecification reference. An AgreementSpecification represents a template of an agreement \nthat can be used when establishing partnerships. \n@referredType \nA string. The actual type of the target instance when needed for \ndisambiguation. \nhref \nA string. Reference of the related entity. \nid \nA string. Unique identifier of a related entity. \nname \nA string. Name of the agreement specification. \ndescription \nA string. A narrative that explains in detail what the agreement specification is \nabout. \nJson representation sample \nWe provide below the json representation of an example of a 'PartnershipSpecification' resource object \n{ \n    \"@type\": \"PartnershipSpecification\",  \n\n\n    \"description\": \"This  partnership specification gives the template for defining a partnership with a content provider\",  \n    \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnershipSpecification/9047\",  \n    \"id\": \"9047\",  \n    \"name\": \"Dream Partnership template\",  \n    \"roleSpecification\": [ \n        [ \n            { \n                \"@type\": \"RoleSpecification\",  \n                \"name\": \"ContentProvider\",  \n                \"agreementSpecification\": [ \n                    { \n                        \"name\": \"ContentLicenseAgreement\",  \n                        \"id\": \"33\" \n                    } \n                ] \n            },  \n            { \n                \"@type\": \"RoleSpecification\",  \n                \"name\": \"CloudProvider\" \n            },  \n            { \n                \"@type\": \"RoleSpecification\",  \n                \"name\": \"Developer\",  \n                \"agreementSpecification\": [ \n                    { \n                        \"name\": \"ProfitShareAgreement\",  \n                        \"id\": \"32\" \n                    } \n                ] \n            },  \n            { \n                \"@type\": \"RoleSpecification\",  \n                \"name\": \"Tester\" \n            } \n        ] \n    ] \n} \nPARTNERSHIP RESOURCE \nA partnership represents a formalized collaboration between various parties, each party playing a role in \nthe partnership. The parties playing a role in the partnership represented by the Partner entity. The \nstructure of a partnership is specified by a PartnershipSpecification which contain all the information for \nthe setup of the partnership, including the list of identified roles and the agreement that should apply. \nResource model"}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-5", "chunkIndex": 5, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 5/10)", "documentType": "Tmforum api user guide", "text": "Note on Partner inheritance: The Partner entity is conceptually a sub-class of the generic PartyRole \nentity that is defined within within the PartyRole API, as depicted by the diagram below. The structure is \n\n\nthe same except that attribute descriptions in Partner entity are overridden to match the vocabulary that is \naccurate for partnerships. \n \nField descriptions \nPartnership fields \ndescription \nA string. An explanatory text regarding this partnership. \nhref \nA string. The reference url for this partnership. \nid \nA string. The identifier of the partnership. \nname \nA string. An identifying name for the partnership. \npartner \nA list of partners (Partner [*]). The list of partners of the partnership, where a \npartner represents a party playing a given role. Hence a partner structure \nincludes primarily a reference to the engaged party and a role name matching \nnecessarily the name of one of the role specifications defined in the \nspecification of the partnership. \nspecification \nA partnership specification reference (PartnershipSpecificationRef). The \nspecification of this partnership. \nCharacteristic sub-resource \nDescribes a given characteristic of an object or entity through a name/value pair. \nname \nA string. Name of the characteristic. \nvalue \nAn any (Any). The value of the characteristic. \nvalueType \nA string. Data type of the value of the characteristic. \nContactMedium sub-resource \nIndicates the contact medium that could be used to contact the party. \ncharacteristic \nA medium characteristic (MediumCharacteristic). Any additional \ncharacteristic(s) of this contact medium. \n\n\nmediumType \nA string. Type of the contact medium, such as: email address, telephone \nnumber, postal address. \npreferred \nA boolean. If true, indicates that is the preferred contact medium. \nvalidFor \nA time period. The time period that the contact medium is valid for. \nCreditProfile sub-resource \nCredit profile for the party (containing credit scoring, ...). By default only the current credit profile  is \nretrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the \ncurrent one. \ncreditProfileDate \nA date time (DateTime). The date the profile was established. \ncreditRiskRating \nAn integer. This is an integer whose value is used to rate the risk. \ncreditScore \nAn integer. A measure of a person or organizations creditworthiness calculated \non the basis of a combination of factors such as their income and credit history. \nvalidFor \nA time period. The period for which the profile is valid. \nMediumCharacteristic sub-resource \nDescribes the contact medium characteristics that could be used to contact a party (an individual or an \norganization). \ncity \nA string. The city. \ncontactType \nA string. The type of contact, for example: phone number such as mobile, fixed \nhome, fixed office. postal address such as shipping instalation\u2026. \ncountry \nA string. The country. \nemailAddress \nA string. Full email address in standard format. \nfaxNumber \nA string. The fax number of the contact. \nphoneNumber \nA string. The primary phone number of the contact. \npostCode \nA string. Postcode. \nsocialNetworkId \nA string. Identifier as a member of a social network. \nstateOrProvince \nA string. State or province. \nstreet1 \nA string. Describes the street. \nstreet2 \nA string. Complementary street description. \nPartner sub-resource \nA party playing a given role in the partnership. \n\n\naccount \nA list of account references (AccountRef [*]). A account may be a party account \nor a financial account. \nagreement \nA list of agreement references (AgreementRef [*]). An agreement represents a \ncontract or arrangement, either written or verbal and sometimes enforceable by \nlaw, such as a service level agreement or a customer price agreement. An \nagreement involves a number of other business entities, such as products, \nservices, and resources and/or their specifications. \ncharacteristic \nA list of characteristics (Characteristic [*]). Describes the characteristic of a \npartner. \ncontactMedium \nA list of contact mediums (ContactMedium [*]). Indicates the contact medium \nthat could be used to contact the party. \ncreditProfile \nA list of credit profiles (CreditProfile [*]). Credit profile for the party (containing \ncredit scoring, ...). By default only the current credit profile  is retrieved. It can \nbe used as a list to give the party credit profiles history, the first one in the list \nwill be the current one. \nengagedParty \nA related party (RelatedParty). The reference to the party engaged in this \npartnership. \nhref \nA string. Url used to reference the partner. \nid \nA string. Unique identifier for Partners. \nname \nA string. A word, term, or phrase by which the Partner is known and \ndistinguished from other Partners. \npaymentMethod \nA list of payment method references (PaymentMethodRef [*]). A payment \nmethod defines a specific mean of payment (e.g direct debit). \nrelatedParty \nA list of related parties (RelatedParty [*]). Related Entity reference. A related \nparty defines party or party role linked to a specific entity. \nstatus \nA string. Used to track the lifecycle status of the partner. \nstatusReason \nA string. A string providing an explanation on the value of the status lifecycle. \nFor instance if the status is Rejected, statusReason will provide the reason for \nrejection. \nvalidFor \nA time period. The time period that the Partner is valid for. \nRelatedParty sub-resource \nRelated Entity reference. A related party defines party or party role linked to a specific entity. \n@referredType \nA string. The actual type of the target instance when needed for \ndisambiguation."}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-6", "chunkIndex": 6, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 6/10)", "documentType": "Tmforum api user guide", "text": "href \nA string. Reference of the related entity. \nid \nA string. Unique identifier of a related entity. \nname \nA string. Name of the related entity. \nrole \nA string. Role played by the related party. \nAccountRef relationship \nAccount reference. A account may be a party account or a financial account. \n@referredType \nA string. The actual type of the target instance when needed for \ndisambiguation. \ndescription \nA string. Detailed description of the account. \nhref \nA string. Reference of the account. \nid \nA string. Unique identifier of the account. \nname \nA string. Name of the account. \nAgreementRef relationship \nAgreement reference. An agreement represents a contract or arrangement, either written or verbal and \nsometimes enforceable by law, such as a service level agreement or a customer price agreement. An \nagreement involves a number of other business entities, such as products, services, and resources and/or \ntheir specifications. \n@referredType \nA string. The actual type of the target instance when needed for \ndisambiguation. \nhref \nA string. Reference of the related entity. \nid \nA string. Unique identifier of a related entity. \nname \nA string. Name of the agreement. \nPartnershipSpecificationRef relationship \nPartnershipSpecification reference. A partnership specification contains all the information for the setup of \na partnership of a given kind. This includes the list of identified role types for the partnership with the \ncorresponding agreement specifications. \n@referredType \nA string. The actual type of the target instance when needed for \ndisambiguation. \nhref \nA string. Reference url for the partnership specification. \nid \nA string. Identifier of the partnership specification. \nname \nA string. Name of the partnership specification. \n\n\nPaymentMethodRef relationship \nPaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit). \n@referredType \nA string. The actual type of the target instance when needed for \ndisambiguation. \nhref \nA string. Reference of the payment mean. \nid \nA string. Unique identifier of the payment mean. \nname \nA string. Name of the payment mean. \nJson representation sample \nWe provide below the json representation of an example of a 'Partnership' resource object \n{ \n    \"@type\": \"Partnership\",  \n    \"description\": \"This  partnership ...\",  \n    \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnership/54\",  \n    \"id\": \"54\",  \n    \"name\": \"Dream Partnership\",  \n    \"specification\": { \n        \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnershipSpecification/9047\",  \n        \"name\": \"Dream Partnership template\" \n    },  \n    \"partner\": [ \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Organization\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/12\",  \n                \"name\": \"SuperdataCompany\",  \n                \"role\": \"ContentProvider\" \n            },  \n            \"account\": [ \n                { \n                    \"@referredType\": \"BillingAccount\",  \n                    \"href\": \"https://host:port/tmf-api/accountManagement/v4/account/10\",  \n                    \"name\": \"Superdata Bahamas Account\" \n                } \n            ] \n        },  \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Organization\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/13\",  \n                \"name\": \"IslandGovernment\",  \n                \"role\": \"ContentProvider\" \n            } \n        },  \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Organization\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/14\",  \n\n\n                \"name\": \"BestCloudCompany\",  \n                \"role\": \"CloudProvider\" \n            } \n        },  \n        { \n            \"engagedParty\": { \n                \"@type\": \"Individual\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/individual/66\",  \n                \"name\": \"Doctor Hack\",  \n                \"role\": \"Developer\" \n            } \n        },  \n        { \n            \"engagedParty\": { \n                \"@type\": \"Individual\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/individual/62\",  \n                \"name\": \"Tester\" \n            } \n        } \n    ] \n} \n \nNotification Resource Models \n \n6 notifications are defined for this API \nNotifications related to PartnershipSpecification: \n    - PartnershipSpecificationCreateEvent \n    - PartnershipSpecificationChangeEvent \n    - PartnershipSpecificationDeleteEvent \nNotifications related to Partnership: \n    - PartnershipCreateEvent \n    - PartnershipChangeEvent \n    - PartnershipDeleteEvent \nThe notification structure for all notifications in this API follow the pattern depicted by the figure below. \nA notification event resource (depicted by \"SpecificEvent\" placeholder) is a sub class of a generic Event \nstructure containing at least an id of the event occurrence (eventId), an event timestamp (eventTime), and \nthe name of the resource (eventType).  \nThis notification structure owns an event payload structure (\"SpecificEventPayload\" placeholder) linked to \nthe resource concerned by the notification using the resource name as access field (\"resourceName\" \nplaceholder). \n\n\n \nPARTNERSHIP SPECIFICATION CREATE EVENT \nNotification PartnershipSpecificationCreateEvent case for resource PartnershipSpecification \nJson representation sample \nWe provide below the json representation of an example of a 'PartnershipSpecificationCreateEvent' \nnotification event object \n{ \n    \"eventId\":\"00001\", \n    \"eventTime\":\"2015-11-16T16:42:25-04:00\", \n    \"eventType\":\"PartnershipSpecificationCreateEvent\", \n\n\n     \"event\": { \n        \"partnershipSpecification\" :  \n            {-- SEE PartnershipSpecification RESOURCE SAMPLE --} \n    } \n} \n \nPARTNERSHIP SPECIFICATION CHANGE EVENT \nNotification PartnershipSpecificationChangeEvent case for resource PartnershipSpecification \nJson representation sample \nWe provide below the json representation of an example of a 'PartnershipSpecificationChangeEvent' \nnotification event object \n{ \n    \"eventId\":\"00001\", \n    \"eventTime\":\"2015-11-16T16:42:25-04:00\", \n    \"eventType\":\"PartnershipSpecificationChangeEvent\", \n     \"event\": { \n        \"partnershipSpecification\" :  \n            {-- SEE PartnershipSpecification RESOURCE SAMPLE --} \n    } \n} \n \nPARTNERSHIP SPECIFICATION DELETE EVENT \nNotification PartnershipSpecificationDeleteEvent case for resource PartnershipSpecification \nJson representation sample \nWe provide below the json representation of an example of a 'PartnershipSpecificationDeleteEvent' \nnotification event object \n{ \n    \"eventId\":\"00001\", \n    \"eventTime\":\"2015-11-16T16:42:25-04:00\", \n    \"eventType\":\"PartnershipSpecificationDeleteEvent\", \n     \"event\": { \n        \"partnershipSpecification\" :  \n            {-- SEE PartnershipSpecification RESOURCE SAMPLE --} \n    } \n} \n \nPARTNERSHIP CREATE EVENT \nNotification PartnershipCreateEvent case for resource Partnership \nJson representation sample"}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-7", "chunkIndex": 7, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 7/10)", "documentType": "Tmforum api user guide", "text": "We provide below the json representation of an example of a 'PartnershipCreateEvent' notification event \nobject \n{ \n    \"eventId\":\"00001\", \n    \"eventTime\":\"2015-11-16T16:42:25-04:00\", \n    \"eventType\":\"PartnershipCreateEvent\", \n     \"event\": { \n        \"partnership\" :  \n            {-- SEE Partnership RESOURCE SAMPLE --} \n    } \n} \n \nPARTNERSHIP CHANGE EVENT \nNotification PartnershipChangeEvent case for resource Partnership \nJson representation sample \nWe provide below the json representation of an example of a 'PartnershipChangeEvent' notification event \nobject \n{ \n    \"eventId\":\"00001\", \n    \"eventTime\":\"2015-11-16T16:42:25-04:00\", \n    \"eventType\":\"PartnershipChangeEvent\", \n     \"event\": { \n        \"partnership\" :  \n            {-- SEE Partnership RESOURCE SAMPLE --} \n    } \n} \n \nPARTNERSHIP DELETE EVENT \nNotification PartnershipDeleteEvent case for resource Partnership \nJson representation sample \nWe provide below the json representation of an example of a 'PartnershipDeleteEvent' notification event \nobject \n{ \n    \"eventId\":\"00001\", \n    \"eventTime\":\"2015-11-16T16:42:25-04:00\", \n    \"eventType\":\"PartnershipDeleteEvent\", \n     \"event\": { \n        \"partnership\" :  \n            {-- SEE Partnership RESOURCE SAMPLE --} \n    } \n} \n \n \n\n\n \n\n\n API OPERATIONS \nRemember the following Uniform Contract: \nOperation on Entities \nUniform API Operation \nDescription \nQuery Entities \nGET Resource \nGET must be used to \nretrieve a representation of \na resource. \n \nCreate Entity \nPOST Resource \nPOST must be used to \ncreate a new resource \nPartial Update of an Entity \nPATCH Resource \nPATCH must be used to \npartially update a resource \nComplete Update of an \nEntity \nPUT Resource \nPUT must be used to \ncompletely update a \nresource identified by its \nresource URI  \nRemove an Entity \nDELETE Resource \nDELETE must be used to \nremove a resource \nExecute an Action on an \nEntity  \nPOST on TASK Resource \nPOST must be used to \nexecute Task Resources \nOther Request Methods \nPOST on TASK Resource \nGET and POST must not \nbe used to tunnel other \nrequest methods. \n \nFiltering and attribute selection rules are described in the TMF REST Design Guidelines. \nNotifications are also described in a subsequent section. \n \nOPERATIONS ON PARTNERSHIP SPECIFICATION \n\n\nLIST PARTNERSHIP SPECIFICATIONS \n  GET /partnershipSpecification?fields=...&{filtering} \nDescription \nThis operation list partnership specification entities. \nAttribute selection is enabled for all first level attributes. \nFiltering may be available depending on the compliance level supported by an implementation. \n \nUsage Samples \nHere's an example of a request for retrieving PartnershipSpecification resources. \n \nRequest \n \nGET /tmf-api/partnershipManagement/v4/partnershipSpecification \nAccept: application/json \n \n \n \nResponse \n \n200 \n \n[ \n    { \n        \"@type\": \"PartnershipSpecification\",  \n        \"description\": \"This  partnership specification gives the template for defining a partnership with a content provider\",  \n        \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnershipSpecification/9047\",  \n        \"id\": \"9047\",  \n        \"name\": \"Dream Partnership template\",  \n        \"roleSpecification\": [ \n            [ \n                { \n                    \"@type\": \"PartnershipRoleSpecification\",  \n                    \"name\": \"ContentProvider\",  \n                    \"agreementSpecification\": [ \n                        { \n                            \"name\": \"ContentLicenseAgreement\",  \n                            \"id\": \"33\" \n                        } \n                    ] \n                },  \n                { \n                    \"@type\": \"PartnershipRoleSpecification\",  \n                    \"name\": \"CloudProvider\" \n                },  \n                { \n                    \"@type\": \"PartnershipRoleSpecification\",  \n                    \"name\": \"Developer\",  \n\n\n                    \"agreementSpecification\": [ \n                        { \n                            \"name\": \"ProfitShareAgreement\",  \n                            \"id\": \"32\" \n                        } \n                    ] \n                },  \n                { \n                    \"@type\": \"PartnershipRoleSpecification\",  \n                    \"name\": \"Tester\" \n                } \n            ] \n        ] \n    } \n] \n \nRETRIEVE PARTNERSHIP SPECIFICATION \n  GET /partnershipSpecification/{id}?fields=...&{filtering} \nDescription \nThis operation retrieves a partnership specification entity. \nAttribute selection is enabled for all first level attributes. \nFiltering on sub-resources may be available depending on the compliance level supported by an \nimplementation. \n \nUsage Samples \nHere's an example of a request for retrieving a PartnershipSpecification resource \n \nRequest \n \nGET /tmf-api/partnershipManagement/v4/partnershipSpecification/1140 \nAccept: application/json \n \n \n \nResponse \n \n200 \n \n{ \n    \"@type\": \"PartnershipSpecification\",  \n    \"description\": \"This  partnership specification gives the template for defining a partnership with a content provider\",  \n    \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnershipSpecification/9047\",  \n    \"id\": \"9047\",  \n    \"name\": \"Dream Partnership template\",  \n    \"roleSpecification\": [ \n        [ \n\n\n            { \n                \"@type\": \"PartnershipRoleSpecification\",  \n                \"name\": \"ContentProvider\",  \n                \"agreementSpecification\": [ \n                    { \n                        \"name\": \"ContentLicenseAgreement\",  \n                        \"id\": \"33\" \n                    } \n                ] \n            },  \n            { \n                \"@type\": \"PartnershipRoleSpecification\",  \n                \"name\": \"CloudProvider\" \n            },  \n            { \n                \"@type\": \"PartnershipRoleSpecification\",  \n                \"name\": \"Developer\",  \n                \"agreementSpecification\": [ \n                    { \n                        \"name\": \"ProfitShareAgreement\",  \n                        \"id\": \"32\" \n                    } \n                ] \n            },  \n            { \n                \"@type\": \"PartnershipRoleSpecification\",  \n                \"name\": \"Tester\" \n            } \n        ] \n    ] \n} \n \nCREATE PARTNERSHIP SPECIFICATION \n  POST /partnershipSpecification \nDescription \nThis operation creates a partnership specification entity. \nMandatory and Non Mandatory Attributes \nThe following tables provide the list of mandatory and non mandatory attributes when creating a \nPartnershipSpecification, including any possible rule conditions and applicable default values. Notice that \nit is up to an implementer to add additional mandatory attributes. \nMandatory Attributes \nRule \nname \n \n \nNon Mandatory Attributes \nRule \ndescription \n \nroleSpecification"}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-8", "chunkIndex": 8, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 8/10)", "documentType": "Tmforum api user guide", "text": "Usage Samples \nHere's an example of a request for creating a PartnershipSpecification resource. \n \nRequest \n \nPOST /tmf-api/partnershipManagement/v4/partnershipSpecification \nContent-Type: application/json \n \n{ \n    \"name\": \"Dream Partnership template\" \n} \n \n \n \nResponse \n \n201 \n \n{ \n    \"@type\": \"PartnershipSpecification\",  \n    \"href\": \"https://host:port/tmf-api/partnershipManagement/v2/partnershipSpecification/9047\",  \n    \"id\": \"9047\",  \n    \"name\": \"Dream Partnership template\" \n} \n \nPATCH PARTNERSHIP SPECIFICATION \n  PATCH /partnershipSpecification/{id} \nDescription \nThis operation allows partial updates of a partnership specification entity. Support of json/merge \n(https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is \noptional. \n \nNote: If the update operation yields to the creation of sub-resources or relationships, the same rules \nconcerning mandatory sub-resource attributes and default value settings in the POST operation applies to \nthe PATCH operation.  Hence these tables are not repeated here. \nPatchable and Non Patchable Attributes \nThe tables below provide the list of patchable and non patchable attributes, including constraint rules on \ntheir usage. \nPatchable Attributes \nRule \ndescription \n \nname \n \nroleSpecification \n \n\n\n \nNon Patchable Attributes \nRule \nhref \n \nid \n \n \nUsage Samples \nHere's an example of a request for patching a PartnershipSpecification resource. \nChanging the name (using json-merge). \n \nRequest \n \nPATCH /tmf-api/partnershipManagement/v4/partnershipSpecification/42 \nContent-Type: application/merge-patch+json \n \n{ \n    \"name\": \"new name\" \n} \n \n \n \nResponse \n \n200 \n \n{ Similar JSON as in GET response with name changed } \n \nDELETE PARTNERSHIP SPECIFICATION \n  DELETE /partnershipSpecification/{id} \nDescription \nThis operation deletes a partnership specification entity. \n \nUsage Samples \nThis operation deletes a PartnershipSpecification resource. \n \nRequest \n \nDELETE /tmf-api/partnershipManagement/v4/partnershipSpecification/42 \n \n \n\n\n \nResponse \n \n204 \n \n \nOPERATIONS ON PARTNERSHIP \nLIST PARTNERSHIPS \n  GET /partnership?fields=...&{filtering} \nDescription \nThis operation list partnership entities. \nAttribute selection is enabled for all first level attributes. \nFiltering may be available depending on the compliance level supported by an implementation. \n \nUsage Samples \nHere's an example of a request for listing Partnership resources. \n \nRequest \n \nGET /tmf-api/partnershipManagement/v4/partnership \nAccept: application/json \n \n \n \nResponse \n \n200 \n \n[ \n    { \n        \"@type\": \"Partnership\",  \n        \"description\": \"This  partnership ...\",  \n        \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnership/54\",  \n        \"id\": \"54\",  \n        \"name\": \"Dream Partnership\",  \n        \"specification\": { \n            \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnershipSpecification/9047\",  \n            \"name\": \"Dream Partnership template\" \n        },  \n        \"partner\": [ \n            { \n                \"engagedParty\": { \n                    \"@referredType\": \"Organization\",  \n                    \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/12\",  \n\n\n                    \"name\": \"SuperdataCompany\",  \n                    \"role\": \"ContentProvider\" \n                },  \n                \"account\": [ \n                    { \n                        \"@referredType\": \"BillingAccount\",  \n                        \"href\": \"https://host:port/tmf-api/accountManagement/v4/account/10\",  \n                        \"name\": \"Superdata Bahamas Account\" \n                    } \n                ] \n            },  \n            { \n                \"engagedParty\": { \n                    \"@referredType\": \"Organization\",  \n                    \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/13\",  \n                    \"name\": \"IslandGovernment\",  \n                    \"role\": \"ContentProvider\" \n                } \n            },  \n            { \n                \"engagedParty\": { \n                    \"@referredType\": \"Organization\",  \n                    \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/14\",  \n                    \"name\": \"BestCloudCompany\",  \n                    \"role\": \"CloudProvider\" \n                } \n            },  \n            { \n                \"engagedParty\": { \n                    \"@referredType\": \"Individual\",  \n                    \"href\": \"https://host:port/tmf-api/partyManagement/v4/individual/66\",  \n                    \"name\": \"Doctor Hack\",  \n                    \"role\": \"Developer\" \n                } \n            },  \n            { \n                \"engagedParty\": { \n                    \"@referredType\": \"Individual\",  \n                    \"href\": \"https://host:port/tmf-api/partyManagement/v4/individual/62\",  \n                    \"name\": \"Tester\" \n                } \n            } \n        ] \n    } \n] \n \nRETRIEVE PARTNERSHIP \n  GET /partnership/{id}?fields=...&{filtering} \nDescription \n\n\nThis operation retrieves a partnership entity. \nAttribute selection is enabled for all first level attributes. \nFiltering on sub-resources may be available depending on the compliance level supported by an \nimplementation. \n \nUsage Samples \nHere's an example of a request for retrieving a Partnership resource \n \nRequest \n \nGET /tmf-api/partnershipManagement/v4/partnership/9047 \nAccept: application/json \n \n \n \nResponse \n \n200 \n \n{ \n    \"@type\": \"Partnership\",  \n    \"description\": \"This  partnership ...\",  \n    \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnership/54\",  \n    \"id\": \"54\",  \n    \"name\": \"Dream Partnership\",  \n    \"specification\": { \n        \"href\": \"https://host:port/tmf-api/partnershipManagement/v4/partnershipSpecification/9047\",  \n        \"name\": \"Dream Partnership template\" \n    },  \n    \"partner\": [ \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Organization\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/12\",  \n                \"name\": \"SuperdataCompany\",  \n                \"role\": \"ContentProvider\" \n            },  \n            \"account\": [ \n                { \n                    \"@referredType\": \"BillingAccount\",  \n                    \"href\": \"https://host:port/tmf-api/accountManagement/v4/account/10\",  \n                    \"name\": \"Superdata Bahamas Account\" \n                } \n            ] \n        },  \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Organization\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/13\",  \n                \"name\": \"IslandGovernment\",  \n                \"role\": \"ContentProvider\""}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-9", "chunkIndex": 9, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 9/10)", "documentType": "Tmforum api user guide", "text": "} \n        },  \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Organization\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/organization/14\",  \n                \"name\": \"BestCloudCompany\",  \n                \"role\": \"CloudProvider\" \n            } \n        },  \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Individual\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/individual/66\",  \n                \"name\": \"Doctor Hack\",  \n                \"role\": \"Developer\" \n            } \n        },  \n        { \n            \"engagedParty\": { \n                \"@referredType\": \"Individual\",  \n                \"href\": \"https://host:port/tmf-api/partyManagement/v4/individual/62\",  \n                \"name\": \"Tester\" \n            } \n        } \n    ] \n} \n \nCREATE PARTNERSHIP \n  POST /partnership \nDescription \nThis operation creates a partnership entity. \nMandatory and Non Mandatory Attributes \nThe following tables provide the list of mandatory and non mandatory attributes when creating a \nPartnership, including any possible rule conditions and applicable default values. Notice that it is up to an \nimplementer to add additional mandatory attributes. \nMandatory Attributes \nRule \nname \n \nspecification \n \n \nNon Mandatory Attributes \nRule \ndescription \n \npartner \n \n \nUsage Samples \n\n\nHere's an example of a request for creating a Partnership resource. The id is forced in the request. \n \nRequest \n \nPOST /tmf-api/partnershipManagement/v4/partnership \nContent-Type: application/json \n \n{ \n    \"name\": \"Dream Partnership\" \n} \n \n \n \nResponse \n \n201 \n \n{ \n    \"@type\": \"Partnership\",  \n    \"href\": \"https://host:port/tmf-api/partnershipManagement/v2/partnership/54\",  \n    \"id\": \"54\",  \n    \"name\": \"Dream Partnership\" \n} \n \nPATCH PARTNERSHIP \n  PATCH /partnership/{id} \nDescription \nThis operation allows partial updates of a partnership entity. Support of json/merge \n(https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is \noptional. \n \nNote: If the update operation yields to the creation of sub-resources or relationships, the same rules \nconcerning mandatory sub-resource attributes and default value settings in the POST operation applies to \nthe PATCH operation.  Hence these tables are not repeated here. \nPatchable and Non Patchable Attributes \nThe tables below provide the list of patchable and non patchable attributes, including constraint rules on \ntheir usage. \nPatchable Attributes \nRule \ndescription \n \nname \n \npartner \n \nspecification \n \n \n\n\nNon Patchable Attributes \nRule \nhref \n \nid \n \n \nUsage Samples \nHere's an example of a request for patching a Partnership resource. \nChanging requires billing to true (using json-merge). \n \nRequest \n \nPATCH /tmf-api/partnershipManagement/v4/partnership/9047 \nContent-Type: application/merge-patch+json \n \n{ \n    \"name\": \"new name\" \n} \n \n \n \nResponse \n \n200 \n \n{ Similar JSON as in GET response with name changed } \n \nDELETE PARTNERSHIP \n  DELETE /partnership/{id} \nDescription \nThis operation deletes a partnership entity. \n \nUsage Samples \nThis operation deletes a Partnership resource. \n \nRequest \n \nDELETE /tmf-api/partnershipManagement/v4/partnership/9047 \n \n \n \nResponse \n \n\n\n204 \n \n \n \n\n\nAPI NOTIFICATIONS \nFor every single of operation on the entities use the following templates and provide sample \nREST notification POST calls. \nIt is assumed that the Pub/Sub uses the Register and UnRegister mechanisms described in the \nREST Guidelines reproduced below. \nREGISTER LISTENER \n  POST /hub \nDescription \nSets the communication endpoint address the service instance must use to deliver information about its \nhealth state, execution state, failures and metrics. Subsequent POST calls will be rejected by the service if \nit does not support multiple listeners. In this case DELETE /api/hub/{id} must be called before an endpoint \ncan be created again. \nBehavior \nReturns HTTP/1.1 status code 204 if the request was successful. \nReturns HTTP/1.1 status code 409 if request is not successful. \nUsage Samples \nHere's an example of a request for registering a listener. \n \n \nRequest \n \nPOST /api/hub \nAccept: application/json \n \n{\"callback\": \"http://in.listener.com\"} \n \n \nResponse \n \n201 \nContent-Type: application/json \nLocation: /api/hub/42 \n \n{\"id\":\"42\",\"callback\":\"http://in.listener.com\",\"query\":null} \n \n \n \n \n\n\n \nUNREGISTER LISTENER \n  DELETE /hub/{id} \nDescription \nClears the communication endpoint address that was set by creating the Hub.. \nBehavior \nReturns HTTP/1.1 status code 204 if the request was successful. \nReturns HTTP/1.1 status code 404 if the resource is not found. \nUsage Samples \nHere's an example of a request for un-registering a listener. \n \nRequest \n \nDELETE /api/hub/42 \nAccept: application/json \n \n \nResponse \n \n204 \n \nPUBLISH EVENT TO LISTENER \n  POST /client/listener \nDescription \nClears the communication endpoint address that was set by creating the Hub. \nProvides to a registered listener the description of the event that was raised. The /client/listener \nurl is the callback url passed when registering the listener. \nBehavior \nReturns HTTP/1.1 status code 201 if the service is able to set the configuration.  \nUsage Samples \nHere's an example of a notification received by the listener. In this example \u201cEVENT TYPE\u201d should be \nreplaced by one of the notification types supported by this API (see Notification resources Models section) \nand EVENT BODY refers to the data structure of the given notification type. \n\n\n \nRequest \n \nPOST /client/listener \nAccept: application/json \n \n{ \n    \"event\": {  \n                EVENT BODY  \n            }, \n    \"eventType\": \"EVENT_TYPE\" \n} \n \n \nResponse \n \n201 \n \nFor detailed examples on the general TM Forum notification mechanism, see the TMF REST \nDesign Guidelines."}
{"tmforumApiId": "TMF668", "id": "TMF668-chunk-10", "chunkIndex": 10, "totalChunks": 10, "apiName": "Partnership Management API v4.0.0 specification", "title": "TMF668_Partnership_Management_API_v4.0.0_specification (Part 10/10)", "documentType": "Tmforum api user guide", "text": "ACKNOWLEDGEMENTS \n \nRELEASE HISTORY \n \nRelease \nNumber \nDate  \nRelease led by: \nDescription  \nRelease 1.0 \n15/15/2016 \nPierre Gauthier \nTM Forum \npgauthier@tmforum.org \n \nMariano Belaunde \nOrange Labs \nFirst Release of the Document.  \nRelease 2.0 \n11/06/2018 \nMariano Belaunde  \nOrange Labs \nAlignment with Guidelines 3.0 \nRelease 4.0 \n19/07/2019 \nMariano Belaunde  \nOrange Labs \nRefactoring and Regeneration \nafter schematization \n \nCONTRIBUTORS TO DOCUMENT \n \nMariano Belaunde \nOrange \nJonathan Goldberg \nAmdocs \nJacob Avraham \nAmdocs \nPierre Gauthier \nTM Forum"}
